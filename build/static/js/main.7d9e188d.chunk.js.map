{"version":3,"sources":["firebase.js","components/App.js","reportWebVitals.js","index.js"],"names":["process","firebaseConfig","apiKey","REACT_APP_FIREBASE_API_KEY","authDomain","REACT_APP_FIREBASE_AUTH_DOMAIN","databaseURL","REACT_APP_FIREBASE_DATABASE_URL","projectId","REACT_APP_FIREBASE_PROJECT_ID","storageBucket","REACT_APP_FIREBASE_STORAGE_BUCKET","messagingSenderId","REACT_APP_FIREBASE_MESSAGING_SENDER_ID","appId","REACT_APP_FIREBASE_APP_ID","firebase","initializeApp","messagesRef","database","ref","App","useState","name","setName","text","setText","messages","setMessages","useEffect","orderByKey","limitToLast","on","snapshot","val","newMessages","Object","entries","map","data","key","message","type","value","onChange","e","target","onClick","push","pushMessage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gPAWIA,wmBAEEC,EAAiB,CACrBC,O,EAVAC,2BAWAC,W,EAVAC,+BAWAC,Y,EAVAC,gCAWAC,U,EAVAC,8BAWAC,c,EAVAC,kCAWAC,kB,EAVAC,uCAWAC,M,EAVAC,2BAaFC,IAASC,cAAchB,GACvB,IACaiB,EADIF,IAASG,WACUC,IAAI,Y,QCwBzBC,EA9CH,WAAO,IAAD,EACQC,mBAAS,WADjB,mBACTC,EADS,KACHC,EADG,OAEQF,mBAAS,QAFjB,mBAETG,EAFS,KAEHC,EAFG,OAGgBJ,mBAAS,IAHzB,mBAGTK,EAHS,KAGCC,EAHD,KAqBhB,OAhBAC,qBAAU,WACRX,EACGY,aACAC,YAAY,IACZC,GAAG,SAAS,SAACC,GACZ,IAAMN,EAAWM,EAASC,MAC1B,GAAiB,OAAbP,EAAJ,CACA,IACMQ,EADUC,OAAOC,QAAQV,GACHW,KAAI,SAACC,GAAU,IAAD,cACjBA,EADiB,GACjCC,EADiC,KAC5BC,EAD4B,KAExC,OAAO,aAAED,OAAQC,MAEnBb,EAAYO,SAEf,IAGD,qCACGR,EAASW,KAAI,SAACG,GAAD,OACZ,gCACGA,EAAQlB,KADX,IACkBkB,EAAQhB,OADhBgB,EAAQD,QAIpB,uBACEE,KAAK,OACLC,MAAOpB,EACPqB,SAAU,SAACC,GAAD,OAAOrB,GAAQ,SAACD,GAAD,OAAkBsB,EAAEC,OAAOH,YAEtD,uBACED,KAAK,OACLC,MAAOlB,EACPmB,SAAU,SAACC,GAAD,OAAOnB,GAAQ,SAACD,GAAD,OAAkBoB,EAAEC,OAAOH,YAEtD,yBAAQI,QAAS,kBDdI,SAAC,GAAoB,IAAlBxB,EAAiB,EAAjBA,KAAME,EAAW,EAAXA,KAClCP,EAAY8B,KAAK,CAAEzB,OAAME,SCaEwB,CAAY,CAAE1B,KAAMA,EAAME,KAAMA,KAAvD,UACG,IADH,OAEO,WC/BEyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7d9e188d.chunk.js","sourcesContent":["import firebase from 'firebase/compat/app'\nimport 'firebase/compat/database'\n\nconst {\n  REACT_APP_FIREBASE_API_KEY,\n  REACT_APP_FIREBASE_AUTH_DOMAIN,\n  REACT_APP_FIREBASE_DATABASE_URL,\n  REACT_APP_FIREBASE_PROJECT_ID,\n  REACT_APP_FIREBASE_STORAGE_BUCKET,\n  REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  REACT_APP_FIREBASE_APP_ID,\n} = process.env\n\nconst firebaseConfig = {\n  apiKey: REACT_APP_FIREBASE_API_KEY,\n  authDomain: REACT_APP_FIREBASE_AUTH_DOMAIN,\n  databaseURL: REACT_APP_FIREBASE_DATABASE_URL,\n  projectId: REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: REACT_APP_FIREBASE_APP_ID,\n}\n\nfirebase.initializeApp(firebaseConfig)\nconst database = firebase.database()\nexport const messagesRef = database.ref('messages')\n\nexport const pushMessage = ({ name, text }) => {\n  messagesRef.push({ name, text })\n}","import React, { useState, useEffect } from \"react\"\nimport { messagesRef, pushMessage } from \"../firebase\"\n\nconst App = () => {\n  const [name, setName] = useState(\"default\")\n  const [text, setText] = useState(\"text\")\n  const [messages, setMessages] = useState([])\n\n  useEffect(() => {\n    messagesRef\n      .orderByKey()\n      .limitToLast(10)\n      .on(\"value\", (snapshot) => {\n        const messages = snapshot.val()\n        if (messages === null) return\n        const entries = Object.entries(messages)\n        const newMessages = entries.map((data) => {\n          const [key, message] = data\n          return { key, ...message }\n        })\n        setMessages(newMessages)\n      })\n  }, [])\n\n  return (\n    <>\n      {messages.map((message) => (\n        <div key={message.key}>\n          {message.name}:{message.text}\n        </div>\n      ))}\n      <input\n        type=\"text\"\n        value={name}\n        onChange={(e) => setName((name) => (name = e.target.value))}\n      />\n      <input\n        type=\"text\"\n        value={text}\n        onChange={(e) => setText((text) => (text = e.target.value))}\n      />\n      <button onClick={() => pushMessage({ name: name, text: text })}>\n        {\" \"}\n        push{\" \"}\n      </button>\n    </>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}